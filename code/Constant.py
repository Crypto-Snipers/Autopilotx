from typing import Optional
from pydantic import BaseModel, EmailStr, Field, ConfigDict
from bson import ObjectId
from datetime import datetime, timezone

#### Strategy related constants


class OrderData(BaseModel):
    Entry:bool = False,
    StopLoss:bool = False,
    StopLossUpdate:bool = False,
    Exit:bool = False,
    Symbol: str
    Side: str
    OrderType: str
    PositionType:Optional[str] = None
    Quantity: float
    Price: Optional[float] = None
    StopLossPrice: Optional[float] = None
    TargetPrice: Optional[float] = None
    StrategyId: Optional[str] = None

#### Broker related constants


class AccountType:
    SPOT = "SPOT"
    FUTURE = "FUTURE"
    OPTION = "OPTION"
    MARGIN = "MARGIN"
    ISOLATED_MARGIN = "ISOLATED_MARGIN"
    

class OrderType:
    LIMIT = "LIMIT"
    MARKET = "MARKET"
    STOP = "STOP"
    STOP_MARKET = "STOP_MARKET"
    STOP_LOSS_LIMIT = "STOP_LOSS_LIMIT"
    TAKE_PROFIT = "TAKE_PROFIT"
    TAKE_PROFIT_LIMIT = "TAKE_PROFIT_LIMIT"


class PositionType:
    LONG = "LONG"
    SHORT = "SHORT"


class OrderSide:
    BUY = "BUY"
    SELL = "SELL"


class Notification(BaseModel):
    # MongoDB's default _id (ObjectId) will be used as the primary key.
    id: Optional[str] = Field(None, alias="_id", description="Primary key (auto-generated by MongoDB as ObjectId)")
    title: str = Field(..., max_length=255, description="Short title of the notification")
    message: str = Field(..., description="Full notification content/message (hyperlinks should be detected and activated by the frontend/client application)")
    user_type: str = Field(..., max_length=50, description="Targeted user type (e.g., ADMIN, CUSTOMER, ALL)")
    is_read: bool = Field(False, description="Whether the notification has been read (auto-detected by application logic upon viewing)")
    is_dismissed: bool = Field(False, description="Whether the user has read and dismissed the notification (user-driven action)")
    start_time: datetime = Field(..., description="When the notification should start appearing")
    created_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc), description="Creation timestamp (UTC)")
    created_by: EmailStr = Field(..., description="Email ID of the user who created the notification")
    last_updated_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc), description="Last modification time of notification (UTC)")
    platform: str = Field("WEB", max_length=50, description="Platform: e.g., WEB, MOBILE, API")
    notification_type: str = Field("INFO", description="Type of notification (e.g., INFO, WARNING, ALERT, PROMOTION, Welcome, Approved)")
    send_email: bool = Field(False, description="Whether to send an email notification for this notification")

    model_config = ConfigDict(
        populate_by_name=True,  # Replaces allow_population_by_field_name
        json_encoders={
            datetime: lambda dt: dt.isoformat(),
            ObjectId: str
        },
        from_attributes=True
    )

